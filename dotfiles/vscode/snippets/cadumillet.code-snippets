{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Print to console": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "clog",
    "body": ["console.log(${TM_SELECTED_TEXT:${1}})"],
    "description": "Log output to console"
  },
  "Styled component with class": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "stycl",
    "body": [
      "export const $1 = styled.$2.attrs(() => ({className: '$3'}))`",
      "  $4",
      "`"
    ],
    "description": "Log output to console"
  },
  "Styled component variable": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "styc",
    "body": ["export const $1 = styled.$2`", "  $4", "`"],
    "description": "Create and export const"
  },
  "Bootstrap React Functional Component": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "oldrfc",
    "body": [
      "import React, { FC, HTMLAttributes } from 'react';",
      "import { My$1 } from './styles';",
      "",
      "interface IProps extends HTMLAttributes<HTMLDivElement> {",
      "  $2",
      "};",
      "",
      "const $1: FC<IProps> = ({$2, ...props}) => {",
      "  return (<My$1 {...props}>$3</My$1>);",
      "};",
      "",
      "export {$1};"
    ],
    "description": "Bootstrap index.tsx"
  },
  "Bootstrap Styled Component": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "sty",
    "body": [
      "import styled, { css } from 'styled-components';",
      "",
      "const variants = {",
      "  $3: css`",
      "    $4",
      "  `",
      "};",
      "",
      "export const $1 = styled.$2`",
      "  $5",
      "  ${variants.$3}",
      "`"
    ],
    "description": "Bootstrap styles.tsx"
  },
  "React Functional Component": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "rfc",
    "body": [
      "import React, { FC, HTMLAttributes } from 'react';",
      "import { $1Wrapper } from './styles';",
      "",
      "interface $1Props extends HTMLAttributes<HTMLDivElement> {",
      "  $2",
      "};",
      "",
      "const $1 = ({$2, ...props}: $1Props): JSX.Element => {",
      "  return (<$1Wrapper {...props}>$3</$1Wrapper>);",
      "};",
      "",
      "export {$1};"
    ],
    "description": "Bootstrap index.tsx"
  }
}
